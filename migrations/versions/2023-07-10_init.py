"""init.

Revision ID: 25b3a0ac8dc2
Revises: None
Create Date: 2023-07-10 16:37:38.313912

"""

# revision identifiers, used by Alembic.
revision = '25b3a0ac8dc2'
down_revision = None

import sqlalchemy as sa
from alembic import context
from alembic import op
from sqlalchemy.dialects import postgresql


def upgrade():
    schema_upgrades()
    if context.get_x_argument(as_dictionary=True).get('data', None):
        data_upgrades()

    import os
    if os.getenv("ENVIRONMENT") in ["LOCAL", "PYTEST"]: 
        from loguru import logger
        logger.opt(colors=True).info("Success migration [ <green>OK</green> ]")
    else:
        pg_user = "user_template_service"
        pg_schema = "template_schema"
        op.execute(f"GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA {pg_schema} TO {pg_user}")
        op.execute(f"GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA {pg_schema} TO {pg_user}")
        op.execute(f"GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA {pg_schema} TO {pg_user}")


def downgrade():
    if context.get_x_argument(as_dictionary=True).get('data', None):
        data_downgrades()
    schema_downgrades()

def schema_upgrades():
    """Schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('template_ping_pong',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ping', sa.Integer(), nullable=False),
    sa.Column('pong', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    schema='template_schema'
    )
    op.create_table('template_user_role',
    sa.Column('id', sa.Integer(), nullable=False, comment='Уникальный идентификатор роли'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False, comment='Дата создания роли'),
    sa.Column('role_name', sa.String(), nullable=False, comment='Имя роли'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('role_name'),
    schema='template_schema'
    )
    op.create_table('template_user',
    sa.Column('id', sa.Integer(), nullable=False, comment='Уникальный идентификатор юзера'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Дата создания юзера'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text("timezone('utc', now())"), nullable=False, comment='Дата обновления юзера'),
    sa.Column('user_name', sa.String(), nullable=False, comment='Имя юзера'),
    sa.Column('role_id', sa.Integer(), server_default=sa.text('1'), nullable=True, comment='ФК на роль'),
    sa.ForeignKeyConstraint(['role_id'], ['template_schema.template_user_role.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_name'),
    schema='template_schema'
    )
    # ### end Alembic commands ###

def schema_downgrades():
    """Schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('template_user', schema='template_schema')
    op.drop_table('template_user_role', schema='template_schema')
    op.drop_table('template_ping_pong', schema='template_schema')
    # ### end Alembic commands ###

def data_upgrades():
    """Чтобы данные проставились во время миграции, нужно вызвать команду c флагом x
    alembic -x data=true upgrade head.
    """
    roles_table = sa.table(
        "template_user_role",
        sa.column("role_name", sa.String),  # остальные поля проставлятся по умолчанию
        schema="template_schema",
    )
    op.bulk_insert(
        roles_table,
        [
            {"role_name": "default"},
            {"role_name": "admin"},
            {"role_name": "manager"},
            {"role_name": "deleted"},
        ],
    )


def data_downgrades():
    """Add any optional data downgrade migrations here!"""
